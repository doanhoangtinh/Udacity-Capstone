version: 2.1

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend build
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Frontend test
          command: |
            npm install
            npm run test
  
  deploy-dockerhub:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Deploy to dockerhub
          command: |
            docker build -t tinhdh/capstone:v1.0.0 .
            docker images
            # docker run -d -p 3000:3000 tinhdh/capstone:v1.0.0
            docker push tinhdh/capstone:v1.0.0

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.25.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            aws sts get-caller-identity
            aws eks update-kubeconfig --name capstone-cluster --region us-west-2 --role-arn arn:aws:iam::176614778603:user/capstone
            # kubectl get nodes
            kubectl apply -f ./deployment.yml
            kubectl get pods
            kubectl apply -f ./service.yml
            kubectl get svc

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["f4:11:2c:0d:48:75:f0:53:4d:13:af:c3:77:da:b5:f2"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > ~/project/backend/migrations_dump.txt
  #           cat ~/project/backend/migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl --insecure https://kvdb.io/Mm8TwjSja4eccfm28mnTsM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           else
  #             echo "Can't send migration status"
  #           fi
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #           yum -y install curl
  #           curl -sL https://rpm.nodesource.com/setup_14.x | bash -
  #           yum install -y nodejs
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=be-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/environment.txt
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           cat environment.txt
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["f4:11:2c:0d:48:75:f0:53:4d:13:af:c3:77:da:b5:f2"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add --update nodejs npm
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # smoke-test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum -y install curl
  #           curl -sL https://rpm.nodesource.com/setup_14.x | bash -
  #           yum install -y nodejs
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=be-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
  #           API_URL="http://${BACKEND_IP}:3030"
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #               exit 0
  #           else
  #               exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo ${URL} 
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #               exit 0
  #           else
  #               exit 1
  #           fi
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar utility
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Add OldWorkflowID to file
  #         command: |
  #           # Fetch the Old workflow ID 
  #           aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text > ~/oldworkflowid.txt
  #           cat ~/oldworkflowid.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - oldworkflowid.txt
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name udapeople-cf \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar utility
  #         command: |
  #           yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/  
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           OldWorkflowID=$(cat ~/oldworkflowid.txt)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo CURRENT_CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
  #           STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]] && [[ "${OldWorkflowID}" != "" ]]
  #           then
  #             echo "--------------------Delete Confirmed--------------------"
  #             echo ${OldWorkflowID}
  #             aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-be-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-fe-${OldWorkflowID}"
  #           else  
  #             echo "--------------------Cannot Cleanup--------------------"
  #           fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      - deploy-dockerhub
      # - deploy-dockerhub:
          # requires:
          #   - test-frontend
      - deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #    requires: [cloudfront-update]
